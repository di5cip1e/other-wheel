name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:unit -- --coverage --watchAll=false
      
    - name: Run integration tests
      run: npm run test:integration -- --watchAll=false
      
    - name: Run performance tests
      run: npm run test:performance -- --watchAll=false
      
    - name: Run statistical validation tests
      run: npm run test:statistical -- --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Build project
      run: npm run build
      
    - name: Run build verification
      run: npm run test:build

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Start development server
      run: npm run serve &
      
    - name: Wait for server
      run: npx wait-on http://localhost:8080
      
    - name: Run E2E tests
      run: npm run test:e2e -- --watchAll=false
      
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots
        path: tests/e2e/screenshots/

  performance-benchmarks:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run performance benchmarks
      run: npm run benchmark
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      run: npx audit-ci --moderate

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Start development server
      run: npm run serve &
      
    - name: Wait for server
      run: npx wait-on http://localhost:8080
      
    - name: Run accessibility tests
      run: npm run test:a11y
      
    - name: Upload accessibility report
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-report
        path: accessibility-report.html

  cross-browser-tests:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Start development server
      run: npm run serve &
      
    - name: Wait for server
      run: npx wait-on http://localhost:8080
      
    - name: Run cross-browser tests
      run: npm run test:browser -- --browser=${{ matrix.browser }}
      env:
        BROWSER: ${{ matrix.browser }}

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate API documentation
      run: npm run docs:generate
      
    - name: Validate documentation
      run: npm run docs:validate
      
    - name: Check documentation links
      run: npm run docs:check-links
      
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/generated/

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, performance-benchmarks]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build:production
      
    - name: Deploy preview
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=dist --alias=pr-${{ github.event.number }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
    - name: Comment PR with preview link
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Preview deployment ready at: https://pr-${{ github.event.number }}--wheel-game.netlify.app'
          })

  quality-gates:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, performance-benchmarks, security-scan, accessibility-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      
    - name: Evaluate quality gates
      run: |
        echo "Evaluating quality gates..."
        
        # Check test coverage
        COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Test coverage below 80%: $COVERAGE%"
          exit 1
        fi
        echo "✅ Test coverage: $COVERAGE%"
        
        # Check performance benchmarks
        AVG_FPS=$(cat benchmark-results.json | jq '.averageFPS')
        if (( $(echo "$AVG_FPS < 58" | bc -l) )); then
          echo "❌ Average FPS below 58: $AVG_FPS"
          exit 1
        fi
        echo "✅ Average FPS: $AVG_FPS"
        
        # Check bundle size
        BUNDLE_SIZE=$(stat -c%s dist/wheel-game.js)
        MAX_SIZE=1048576  # 1MB
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "❌ Bundle size too large: $(($BUNDLE_SIZE / 1024))KB"
          exit 1
        fi
        echo "✅ Bundle size: $(($BUNDLE_SIZE / 1024))KB"
        
        echo "🎉 All quality gates passed!"

  notify:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.quality-gates.result == 'success'
      run: |
        echo "✅ CI pipeline completed successfully!"
        
    - name: Notify failure
      if: needs.quality-gates.result == 'failure'
      run: |
        echo "❌ CI pipeline failed!"
        exit 1